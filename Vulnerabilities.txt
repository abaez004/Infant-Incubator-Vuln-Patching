Angel Baez
ab6405

1. There doesn't seem to be any control over how many tokens can be created using the given password. Because of the way the token are appended to a list and only removed on LOGOUT, I think you could theoretically run python out of memory by overflowing the list. To fix this, there would need to be logic when issuing the tokens so that for each unique connection, only one token can be issued. To fix this, there would need to be logic when issuing the tokens so that for each unique connection, only one token can be issued. 

2. Elevated commands can be entered without the use of authentication due to the way parsing is handled. Example: LOGOUT a;SET_DEGF The SampleNetworkClient processes this command, tries to remove token a, then proceeds to process the command to the right of the semicolon. This command counts as length 2 when parsed by spaces, but also a command that parses with semicolons. The check in the running function will pass the length 2 check, but the processCommands function will process both the LOGOUT and the second portion of the command. To fix this, the processCommands function should have break statements after unknown/invalid command paths have been reached. The command should not be processed further in these cases.

3. One of the most obvious vulnerabilities with this infant incubator system is the use of a hardcoded password to gain access to the sample network server. One static password stored in the code itself is an easy way to have an attack waiting to happen. The password should be stored somewhere secure (a database) and be encrypted, not stored in plaintext in the source code. This vulnerability is more difficult to create a testcase for, but the risk and ease of attack are both very high with this vulnerability.

4. Another issue with the infant incubator is the use of UDP to communicate between the network client and network server. Although UDP may be more convenient and require less overhead to set up, the messages transmitted are not encrypted and in plaintext. Someone skilled enough could perform a man in the middle attack and easily steal the hardcoded password (or any sensitive information for that matter) and gain access to the system. In order to fix this, TCP sockets can be used with TLS instead of UDP sockets. Changing the sockets from type=socket.SOCK_DGRAM to type=socket.SOCK_STREAM, and using SSL wrappers provided by python would protect the data flowing over the network.
